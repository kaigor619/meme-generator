[{"D:\\Projects\\memo-generator2\\frontend\\src\\index.js":"1","D:\\Projects\\memo-generator2\\frontend\\src\\reportWebVitals.js":"2","D:\\Projects\\memo-generator2\\frontend\\src\\store.js":"3","D:\\Projects\\memo-generator2\\frontend\\src\\components\\App\\index.js":"4","D:\\Projects\\memo-generator2\\frontend\\src\\reducers\\index.js":"5","D:\\Projects\\memo-generator2\\frontend\\src\\components\\App\\App.js":"6","D:\\Projects\\memo-generator2\\frontend\\src\\types\\constant.js":"7","D:\\Projects\\memo-generator2\\frontend\\src\\types\\elements.js":"8","D:\\Projects\\memo-generator2\\frontend\\src\\types\\paths.js":"9","D:\\Projects\\memo-generator2\\frontend\\src\\scenes\\EditPage\\index.js":"10","D:\\Projects\\memo-generator2\\frontend\\src\\scenes\\EditPage\\EditPage.js":"11","D:\\Projects\\memo-generator2\\frontend\\src\\scenes\\EditPage\\scenes\\ToolsBar\\index.js":"12","D:\\Projects\\memo-generator2\\frontend\\src\\scenes\\EditPage\\scenes\\Sidebar\\index.js":"13","D:\\Projects\\memo-generator2\\frontend\\src\\scenes\\EditPage\\scenes\\Canvas\\index.js":"14","D:\\Projects\\memo-generator2\\frontend\\src\\components\\Header\\index.js":"15","D:\\Projects\\memo-generator2\\frontend\\src\\scenes\\EditPage\\scenes\\ToolsBar\\ToolsBar.js":"16","D:\\Projects\\memo-generator2\\frontend\\src\\scenes\\EditPage\\scenes\\Sidebar\\Sidebar.js":"17","D:\\Projects\\memo-generator2\\frontend\\src\\scenes\\EditPage\\scenes\\Canvas\\Canvas.js":"18","D:\\Projects\\memo-generator2\\frontend\\src\\components\\Header\\Header.js":"19","D:\\Projects\\memo-generator2\\frontend\\src\\scenes\\EditPage\\scenes\\Sidebar\\components\\CanvasOptions\\index.js":"20","D:\\Projects\\memo-generator2\\frontend\\src\\scenes\\EditPage\\scenes\\Sidebar\\components\\TextOptions\\index.js":"21","D:\\Projects\\memo-generator2\\frontend\\src\\services\\konva.js":"22","D:\\Projects\\memo-generator2\\frontend\\src\\utils\\helpers.js":"23","D:\\Projects\\memo-generator2\\frontend\\src\\scenes\\EditPage\\scenes\\Sidebar\\components\\CanvasOptions\\CanvasOptions.js":"24","D:\\Projects\\memo-generator2\\frontend\\src\\scenes\\EditPage\\scenes\\Sidebar\\components\\TextOptions\\TextOptions.js":"25","D:\\Projects\\memo-generator2\\frontend\\src\\scenes\\EditPage\\scenes\\Sidebar\\components\\TextOptions\\data.js":"26","D:\\Projects\\memo-generator2\\frontend\\src\\types\\fonts.js":"27","D:\\Projects\\memo-generator2\\frontend\\src\\components\\Form\\index.js":"28","D:\\Projects\\memo-generator2\\frontend\\src\\components\\SidebarSection\\index.js":"29","D:\\Projects\\memo-generator2\\frontend\\src\\modals\\AddBackground\\index.js":"30","D:\\Projects\\memo-generator2\\frontend\\src\\components\\SidebarSection\\SidebarSection.js":"31","D:\\Projects\\memo-generator2\\frontend\\src\\modals\\AddBackground\\AddBackground.js":"32","D:\\Projects\\memo-generator2\\frontend\\src\\components\\Form\\components\\ButtonsCheck\\index.js":"33","D:\\Projects\\memo-generator2\\frontend\\src\\components\\Form\\components\\Number\\index.js":"34","D:\\Projects\\memo-generator2\\frontend\\src\\components\\Form\\components\\Select\\index.js":"35","D:\\Projects\\memo-generator2\\frontend\\src\\components\\Form\\components\\ButtonsSwitch\\index.js":"36","D:\\Projects\\memo-generator2\\frontend\\src\\components\\Form\\components\\Color\\index.js":"37","D:\\Projects\\memo-generator2\\frontend\\src\\components\\Form\\components\\Select\\Select.js":"38","D:\\Projects\\memo-generator2\\frontend\\src\\components\\Form\\components\\ButtonsSwitch\\ButtonsSwitch.js":"39","D:\\Projects\\memo-generator2\\frontend\\src\\components\\Form\\components\\Color\\Color.js":"40","D:\\Projects\\memo-generator2\\frontend\\src\\components\\Form\\components\\ButtonsCheck\\ButtonsCheck.js":"41","D:\\Projects\\memo-generator2\\frontend\\src\\components\\Form\\components\\Number\\Number.js":"42","D:\\Projects\\memo-generator2\\frontend\\src\\components\\Dropzone\\index.js":"43","D:\\Projects\\memo-generator2\\frontend\\src\\components\\Modal\\index.js":"44","D:\\Projects\\memo-generator2\\frontend\\src\\components\\Dropzone\\Dropzone.js":"45","D:\\Projects\\memo-generator2\\frontend\\src\\components\\Modal\\Modal.js":"46"},{"size":725,"mtime":1617474950369,"results":"47","hashOfConfig":"48"},{"size":364,"mtime":1612041520906,"results":"49","hashOfConfig":"48"},{"size":298,"mtime":1615731357452,"results":"50","hashOfConfig":"48"},{"size":49,"mtime":1612041672695,"results":"51","hashOfConfig":"48"},{"size":3192,"mtime":1619470031719,"results":"52","hashOfConfig":"48"},{"size":362,"mtime":1618257988023,"results":"53","hashOfConfig":"48"},{"size":121,"mtime":1618768524049,"results":"54","hashOfConfig":"48"},{"size":986,"mtime":1619470033616,"results":"55","hashOfConfig":"48"},{"size":78,"mtime":1614516119593,"results":"56","hashOfConfig":"48"},{"size":56,"mtime":1617475109836,"results":"57","hashOfConfig":"48"},{"size":636,"mtime":1618676202446,"results":"58","hashOfConfig":"48"},{"size":64,"mtime":1619206903673,"results":"59","hashOfConfig":"48"},{"size":61,"mtime":1617478672834,"results":"60","hashOfConfig":"48"},{"size":58,"mtime":1617475403375,"results":"61","hashOfConfig":"48"},{"size":58,"mtime":1617474836052,"results":"62","hashOfConfig":"48"},{"size":1791,"mtime":1619299283725,"results":"63","hashOfConfig":"48"},{"size":1168,"mtime":1618769413997,"results":"64","hashOfConfig":"48"},{"size":18287,"mtime":1619377090347,"results":"65","hashOfConfig":"48"},{"size":1373,"mtime":1619376578534,"results":"66","hashOfConfig":"48"},{"size":79,"mtime":1618768785797,"results":"67","hashOfConfig":"48"},{"size":73,"mtime":1617481747783,"results":"68","hashOfConfig":"48"},{"size":213,"mtime":1615731072417,"results":"69","hashOfConfig":"48"},{"size":4760,"mtime":1619470182102,"results":"70","hashOfConfig":"48"},{"size":3941,"mtime":1619356168694,"results":"71","hashOfConfig":"48"},{"size":4360,"mtime":1619470427996,"results":"72","hashOfConfig":"48"},{"size":1033,"mtime":1618258768279,"results":"73","hashOfConfig":"48"},{"size":205,"mtime":1618514559151,"results":"74","hashOfConfig":"48"},{"size":305,"mtime":1617487533177,"results":"75","hashOfConfig":"48"},{"size":82,"mtime":1617482081699,"results":"76","hashOfConfig":"48"},{"size":79,"mtime":1619267597036,"results":"77","hashOfConfig":"48"},{"size":316,"mtime":1617482250936,"results":"78","hashOfConfig":"48"},{"size":932,"mtime":1619296764978,"results":"79","hashOfConfig":"48"},{"size":76,"mtime":1617483421872,"results":"80","hashOfConfig":"48"},{"size":58,"mtime":1617472358726,"results":"81","hashOfConfig":"48"},{"size":58,"mtime":1616874448412,"results":"82","hashOfConfig":"48"},{"size":79,"mtime":1617484561613,"results":"83","hashOfConfig":"48"},{"size":55,"mtime":1617486910018,"results":"84","hashOfConfig":"48"},{"size":402,"mtime":1619350224332,"results":"85","hashOfConfig":"48"},{"size":1231,"mtime":1618141414601,"results":"86","hashOfConfig":"48"},{"size":1497,"mtime":1618678628652,"results":"87","hashOfConfig":"48"},{"size":1811,"mtime":1618143171148,"results":"88","hashOfConfig":"48"},{"size":1008,"mtime":1619260002242,"results":"89","hashOfConfig":"48"},{"size":64,"mtime":1619288054169,"results":"90","hashOfConfig":"48"},{"size":55,"mtime":1619266816369,"results":"91","hashOfConfig":"48"},{"size":995,"mtime":1619290247629,"results":"92","hashOfConfig":"48"},{"size":414,"mtime":1619289361180,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},"1iu949d",{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197"},"D:\\Projects\\memo-generator2\\frontend\\src\\index.js",["198"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","D:\\Projects\\memo-generator2\\frontend\\src\\reportWebVitals.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\store.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\components\\App\\index.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\reducers\\index.js",["199","200"],"import { ELEMENT_TYPE } from \"types/constant\";\r\nimport { TEXT_OPTIONS_TEMPLATE } from \"types/elements\";\r\n\r\nimport canvasBackground from \"assets/images/canvas-background.jpg\";\r\n\r\nconst types = {\r\n  CHANGE_ACTIVE_ELEMENT: \"CHANGE_ACTIVE_ELEMENT\",\r\n  ADD_ELEMENT: \"ADD_ELEMENT\",\r\n  DELETE_ELEMENT: \"DELETE_ELEMENT\",\r\n  UPDATE_ELEMENT: \"UPDATE_ELEMENT\",\r\n  UPDATE_CANVAS: \"UPDATE_CANVAS\",\r\n  CHANGE_MODAL_ID: \"CHANGE_MODAL_ID\",\r\n  UPDATE_STAGE: \"UPDATE_STAGE\",\r\n};\r\n\r\nconst initialState = {\r\n  activeId: \"canvas\",\r\n  stage: null,\r\n  modalId: \"\",\r\n  canvas: {\r\n    id: \"canvas\",\r\n    container: \"canvas\",\r\n    width: 500,\r\n    height: 400,\r\n    fill: \"#fff\",\r\n    // backgroundImage: canvasBackground,\r\n    backgroundImage: \"\",\r\n    backgroundFile: null,\r\n  },\r\n  elements: [\r\n    {\r\n      id: 1,\r\n      ...TEXT_OPTIONS_TEMPLATE,\r\n    },\r\n  ],\r\n};\r\n\r\nexport const handleUpdateStage = (stage) => {\r\n  return {\r\n    type: types.UPDATE_STAGE,\r\n    data: stage,\r\n  };\r\n};\r\n\r\nexport const handleChangeModalId = (id) => {\r\n  return {\r\n    type: types.CHANGE_MODAL_ID,\r\n    data: id,\r\n  };\r\n};\r\n\r\nexport const handleChangeActiveElement = (id) => {\r\n  return {\r\n    type: types.CHANGE_ACTIVE_ELEMENT,\r\n    data: id,\r\n  };\r\n};\r\n\r\nexport const handleAddElement = () => (dispatch) => {\r\n  const id = Date.now().toString();\r\n\r\n  dispatch({\r\n    type: types.ADD_ELEMENT,\r\n    data: { id, ...TEXT_OPTIONS_TEMPLATE },\r\n  });\r\n};\r\n\r\nexport const handleUpdateStyleElement = (id, data) => (dispatch, getState) => {\r\n  const { elements } = getState();\r\n\r\n  const element = elements.find((item) => item.id === id);\r\n\r\n  if (!element) return;\r\n\r\n  dispatch({\r\n    type: types.UPDATE_ELEMENT,\r\n    data: { ...element, style: { ...element.style, ...data } },\r\n  });\r\n};\r\n\r\nexport const handleUpdateElement = (id, data) => (dispatch, getState) => {\r\n  dispatch({\r\n    type: types.UPDATE_ELEMENT,\r\n    data: { id, ...data },\r\n  });\r\n};\r\nexport const handleUpdateCanvas = (data) => (dispatch, getState) => {\r\n  dispatch({\r\n    type: types.UPDATE_CANVAS,\r\n    data: data,\r\n  });\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.ADD_ELEMENT: {\r\n      return {\r\n        ...state,\r\n        elements: [...state.elements, action.data],\r\n      };\r\n    }\r\n    case types.DELETE_ELEMENT: {\r\n      return {\r\n        ...state,\r\n        elements: state.elements.filter((item) => item.id !== action.id),\r\n      };\r\n    }\r\n    case types.UPDATE_ELEMENT: {\r\n      return {\r\n        ...state,\r\n        elements: [\r\n          ...state.elements.filter((item) => item.id !== action.data.id),\r\n          action.data,\r\n        ],\r\n      };\r\n    }\r\n    case types.CHANGE_ACTIVE_ELEMENT: {\r\n      return {\r\n        ...state,\r\n        activeId: action.data,\r\n      };\r\n    }\r\n    case types.UPDATE_CANVAS: {\r\n      return {\r\n        ...state,\r\n        canvas: action.data,\r\n      };\r\n    }\r\n    case types.CHANGE_MODAL_ID: {\r\n      return {\r\n        ...state,\r\n        modalId: action.data,\r\n      };\r\n    }\r\n    case types.UPDATE_STAGE: {\r\n      return {\r\n        ...state,\r\n        stage: action.data,\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","D:\\Projects\\memo-generator2\\frontend\\src\\components\\App\\App.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\types\\constant.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\types\\elements.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\types\\paths.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\scenes\\EditPage\\index.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\scenes\\EditPage\\EditPage.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\scenes\\EditPage\\scenes\\ToolsBar\\index.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\scenes\\EditPage\\scenes\\Sidebar\\index.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\scenes\\EditPage\\scenes\\Canvas\\index.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\components\\Header\\index.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\scenes\\EditPage\\scenes\\ToolsBar\\ToolsBar.js",["201"],"import React, { useMemo } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { handleAddElement, handleChangeActiveElement } from \"reducers\";\r\nimport classes from \"./ToolsBar.module.scss\";\r\n\r\nimport textIcon from \"./images/text.svg\";\r\nimport imageIcon from \"./images/image.svg\";\r\nimport uploadIcon from \"./images/upload.svg\";\r\nimport backgroundIcon from \"./images/background.svg\";\r\n\r\nconst ToolBarItem = ({ label, icon, action }) => (\r\n  <li className={classes.toolsBarItem} onClick={action}>\r\n    <div className={classes.toolsBarItemContent}>\r\n      <img src={icon} alt=\"icon\" />\r\n      <span>{label}</span>\r\n    </div>\r\n  </li>\r\n);\r\n\r\nconst ToolsBar = ({ handleAddElement, handleChangeActiveElement }) => {\r\n  const toolBarList = useMemo(\r\n    () => [\r\n      {\r\n        label: \"Text\",\r\n        icon: textIcon,\r\n        action: () => handleAddElement(),\r\n      },\r\n      {\r\n        label: \"Image\",\r\n        icon: imageIcon,\r\n        action: () => {},\r\n      },\r\n      {\r\n        label: \"Upload\",\r\n        icon: uploadIcon,\r\n        action: () => {},\r\n      },\r\n      {\r\n        label: \"Back\",\r\n        icon: backgroundIcon,\r\n        action: () => {},\r\n      },\r\n    ],\r\n    [classes]\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className={classes.toolsBar}\r\n      onClick={() => handleChangeActiveElement(\"\")}\r\n    >\r\n      <ul className={classes.toolsBarList} onClick={(e) => e.stopPropagation()}>\r\n        {toolBarList.map((item) => (\r\n          <ToolBarItem\r\n            key={item.label}\r\n            icon={item.icon}\r\n            label={item.label}\r\n            action={item.action}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatch = {\r\n  handleAddElement,\r\n  handleChangeActiveElement,\r\n};\r\n\r\nexport default connect(null, mapDispatch)(ToolsBar);\r\n","D:\\Projects\\memo-generator2\\frontend\\src\\scenes\\EditPage\\scenes\\Sidebar\\Sidebar.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\scenes\\EditPage\\scenes\\Canvas\\Canvas.js",["202","203","204","205","206"],"import React, { Component, createRef } from \"react\";\r\nimport { ELEMENT_TYPE } from \"types/constant\";\r\nimport { TEXT_OPTIONS_TEMPLATE, CANVAS_CONFIG } from \"types/elements\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  handleUpdateStyleElement,\r\n  handleChangeActiveElement,\r\n  handleUpdateCanvas,\r\n  handleUpdateStage,\r\n} from \"reducers\";\r\nimport * as konvaService from \"services/konva\";\r\nimport Konva from \"konva\";\r\nimport helper from \"utils/helpers\";\r\nimport canvasBackground from \"assets/images/canvas-background.jpg\";\r\n\r\nimport \"./Canvas.scss\";\r\n\r\nclass Canvas extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.hoverRef = React.createRef();\r\n    this.canvasWrapper = React.createRef();\r\n  }\r\n  stage = null;\r\n  background = {\r\n    backgroundRect: null,\r\n    backgroundImage: null,\r\n    layer: null,\r\n  };\r\n  elementsState = [];\r\n  transformer = null;\r\n  canvasNode = null;\r\n\r\n  handleClickFrame = () => {\r\n    this.handleDeleteTransformerExcept();\r\n    this.props.handleChangeActiveElement(\"\");\r\n    helper.toggleCanvasEdit(false);\r\n  };\r\n\r\n  handleDeleteTransformerExcept(id) {\r\n    this.elementsState\r\n      .filter((item) => item.type !== ELEMENT_TYPE.background)\r\n      .forEach((item) => {\r\n        let isTransforming = item.transformer.isTransforming();\r\n\r\n        // ** understand why isTransforming always false\r\n        // if (isTransforming && item.id !== id) {\r\n        if (item.id !== id) {\r\n          item.transformer.hide();\r\n          item.transformer.enabledAnchors([]);\r\n          item.layer.draw();\r\n        }\r\n      });\r\n  }\r\n\r\n  init = () => {\r\n    const { elements, canvas } = this.props;\r\n\r\n    const config = helper.getCanvasConfig(canvas);\r\n\r\n    const stage = new Konva.Stage({ ...config });\r\n    this.canvasNode = document.getElementById(canvas.container);\r\n    this.stage = stage;\r\n\r\n    var layer = new Konva.Layer();\r\n    this.background.layer = layer;\r\n\r\n    if (canvas.backgroundImage) {\r\n      const imageObj = new Image();\r\n      imageObj.onload = () => {\r\n        const yoda = new Konva.Image({\r\n          x: 0,\r\n          y: 0,\r\n          image: imageObj,\r\n          width: canvas.width,\r\n          height: canvas.height,\r\n        });\r\n\r\n        this.background.backgroundImage = yoda;\r\n\r\n        layer.add(yoda);\r\n        layer.batchDraw();\r\n      };\r\n      imageObj.src = canvas.backgroundImage;\r\n    } else {\r\n      const imageObj = new Image();\r\n\r\n      imageObj.onload = () => {\r\n        const yoda = new Konva.Image({\r\n          x: 0,\r\n          y: 0,\r\n          image: imageObj,\r\n          width: canvas.width,\r\n          height: canvas.height,\r\n        });\r\n\r\n        this.background.backgroundImage = yoda;\r\n\r\n        yoda.hide();\r\n\r\n        layer.add(yoda);\r\n        layer.batchDraw();\r\n      };\r\n      imageObj.src = canvasBackground;\r\n    }\r\n\r\n    const rect = new Konva.Rect({\r\n      x: 0,\r\n      y: 0,\r\n      width: canvas.width,\r\n      height: canvas.height,\r\n      fill: canvas.fill,\r\n    });\r\n    this.background.backgroundRect = rect;\r\n    layer.add(rect);\r\n\r\n    layer.on(\"click\", (e) => {\r\n      console.log(\"background click\");\r\n      this.props.handleChangeActiveElement(canvas.id);\r\n      helper.toggleCanvasEdit(true);\r\n      this.handleDeleteTransformerExcept();\r\n    });\r\n\r\n    this.stage.add(layer);\r\n    layer.draw();\r\n\r\n    this.createElements(elements, { isAdd: false });\r\n    this.props.handleUpdateStage(this.stage);\r\n  };\r\n\r\n  updateCanvas = (options) => {\r\n    const canvasContent = document.querySelector(\".canvasContent\");\r\n    if (options.width !== this.props.canvas.width) {\r\n      if (options.width > canvasContent.clientWidth) {\r\n        options.width = canvasContent.clientWidth;\r\n        // let x =\r\n        //   (100 * (options.width - canvasContent.clientWidth)) / options.width;\r\n        // console.log(options.width, canvasContent.clientWidth);\r\n        // options.scaleX = x.toFixed(0) / 100;\r\n      }\r\n    }\r\n    if (options.height !== this.props.canvas.height) {\r\n      if (options.height > canvasContent.clientHeight) {\r\n        console.log(options.height);\r\n        options.height = canvasContent.clientHeight;\r\n        // let x =\r\n        //   (100 * (options.width - canvasContent.clientWidth)) / options.width;\r\n        // console.log(options.width, canvasContent.clientWidth);\r\n        // options.scaleX = x.toFixed(0) / 100;\r\n      }\r\n    }\r\n\r\n    this.stage.setAttrs(helper.getCanvasConfig(options));\r\n\r\n    if (!options.backgroundImage) {\r\n      this.background.backgroundRect.setAttrs({\r\n        width: options.width,\r\n        height: options.height,\r\n        fill: options.fill,\r\n      });\r\n    }\r\n\r\n    if (options.backgroundImage) {\r\n      if (this.props.canvas.backgroundImage !== options.backgroundImage) {\r\n        const imageObj = new Image();\r\n\r\n        imageObj.onload = () => {\r\n          this.background.backgroundImage.setAttrs({\r\n            width: options.width,\r\n            height: options.height,\r\n            image: imageObj,\r\n          });\r\n\r\n          this.background.backgroundImage.show();\r\n          this.background.layer.draw();\r\n        };\r\n\r\n        imageObj.src = options.backgroundImage;\r\n      } else {\r\n        this.background.backgroundImage.setAttrs({\r\n          width: options.width,\r\n          height: options.height,\r\n        });\r\n\r\n        this.background.layer.draw();\r\n      }\r\n    } else {\r\n      this.background.backgroundImage.hide();\r\n      this.background.layer.draw();\r\n    }\r\n  };\r\n\r\n  createElements = (elements, { isAdd }) => {\r\n    elements.forEach((item) => {\r\n      if (item.type === ELEMENT_TYPE.background) {\r\n        const imageObj = new Image();\r\n        const layer = new Konva.Layer();\r\n\r\n        layer.on(\"click\", (e) => {\r\n          console.log(\"background click\");\r\n          this.props.handleChangeActiveElement(item.id);\r\n          helper.toggleCanvasEdit(true);\r\n\r\n          this.handleDeleteTransformerExcept();\r\n        });\r\n\r\n        imageObj.onload = () => {\r\n          const yoda = new Konva.Image({\r\n            x: item.x,\r\n            y: item.y,\r\n            image: imageObj,\r\n            width: item.width,\r\n            height: item.height,\r\n          });\r\n\r\n          layer.add(yoda);\r\n          layer.batchDraw();\r\n\r\n          this.elementsState.push({\r\n            id: item.id,\r\n            type: item.type,\r\n            layer,\r\n            element: yoda,\r\n          });\r\n        };\r\n        imageObj.src = item.src;\r\n        this.stage.add(layer);\r\n      }\r\n      if (item.type === ELEMENT_TYPE.text) {\r\n        const layer = new Konva.Layer();\r\n\r\n        const textNode = new Konva.Text({\r\n          draggable: true,\r\n          x: 0,\r\n          y: 0,\r\n          ...item.style,\r\n        });\r\n\r\n        layer.on(\"mouseover\", (evt) => {\r\n          const x = this.elementsState.find((c) => c.id === item.id);\r\n\r\n          if (!x) return;\r\n\r\n          if (x.transformer.enabledAnchors().length > 0) return;\r\n\r\n          x.transformer.enabledAnchors([]);\r\n          x.transformer.show();\r\n          x.layer.draw();\r\n        });\r\n        layer.on(\"mouseout\", (evt) => {\r\n          const x = this.elementsState.find((c) => c.id === item.id);\r\n\r\n          if (!x) return;\r\n\r\n          if (x.transformer.enabledAnchors().length > 0) return;\r\n\r\n          x.transformer.hide();\r\n          x.layer.draw();\r\n          // this.hoverRef.current.style.display = \"none\";\r\n        });\r\n\r\n        if (isAdd) {\r\n          const stageSizes = this.stage.size();\r\n          const nodeSizes = textNode.size();\r\n\r\n          textNode.absolutePosition({\r\n            x: stageSizes.width / 2 - nodeSizes.width / 2,\r\n            y: stageSizes.height / 2 - nodeSizes.height / 2,\r\n          });\r\n        }\r\n\r\n        textNode.on(\"mousedown\", (e) => {\r\n          // this.hoverRef.current.style.display = \"none\";\r\n          this.props.handleChangeActiveElement(item.id);\r\n          helper.toggleCanvasEdit(false);\r\n\r\n          const searchElement = this.elementsState.find(\r\n            (c) => c.id === item.id\r\n          );\r\n\r\n          if (searchElement) {\r\n            searchElement.transformer.enabledAnchors([\r\n              \"top-left\",\r\n              \"top-right\",\r\n              \"bottom-left\",\r\n              \"bottom-right\",\r\n            ]);\r\n            searchElement.transformer.show();\r\n            searchElement.layer.draw();\r\n          }\r\n          this.handleDeleteTransformerExcept(item.id);\r\n        });\r\n\r\n        textNode.on(\"transform\", function () {\r\n          textNode.setAttrs({\r\n            width: textNode.width() * textNode.scaleX(),\r\n            height: textNode.height() * textNode.scaleY(),\r\n            scaleX: 1,\r\n            scaleY: 1,\r\n          });\r\n        });\r\n\r\n        layer.add(textNode);\r\n\r\n        const tr = new Konva.Transformer({\r\n          rotateEnabled: false,\r\n          enabledAnchors: [],\r\n          node: textNode,\r\n          centeredScaling: false,\r\n        });\r\n\r\n        tr.hide();\r\n\r\n        layer.add(tr);\r\n\r\n        // < Edit Text\r\n        textNode.on(\"dblclick dbltap\", () => {\r\n          // hide text node and transformer:\r\n          textNode.hide();\r\n          tr.hide();\r\n          layer.draw();\r\n\r\n          const textarea = helper.createEditableBlock.call(this, textNode);\r\n\r\n          textarea.focus();\r\n\r\n          function removeTextarea() {\r\n            textarea.parentNode.removeChild(textarea);\r\n            window.removeEventListener(\"click\", handleOutsideClick);\r\n            textNode.show();\r\n            tr.show();\r\n            tr.forceUpdate();\r\n            layer.draw();\r\n          }\r\n\r\n          textarea.addEventListener(\"keydown\", function (e) {\r\n            // hide on enter\r\n            // but don't hide on shift + enter\r\n            if (e.keyCode === 13 && !e.shiftKey) {\r\n              textNode.text(textarea.innerText);\r\n              removeTextarea();\r\n            }\r\n            // on esc do not set value back to node\r\n            if (e.keyCode === 27) {\r\n              removeTextarea();\r\n            }\r\n          });\r\n\r\n          textarea.addEventListener(\"keydown\", function (e) {\r\n            const scale = textNode.getAbsoluteScale().x;\r\n            textarea.style.width = helper.getTextareaWidth(\r\n              textNode.width() * scale,\r\n              textNode\r\n            );\r\n            textarea.style.height = \"auto\";\r\n            textarea.style.height =\r\n              textarea.scrollHeight + textNode.fontSize() + \"px\";\r\n          });\r\n\r\n          function handleOutsideClick(e) {\r\n            if (e.target !== textarea) {\r\n              textNode.text(textarea.innerText);\r\n              removeTextarea();\r\n            }\r\n          }\r\n          setTimeout(() => {\r\n            window.addEventListener(\"click\", handleOutsideClick);\r\n          });\r\n        });\r\n\r\n        // </ Edit Text\r\n\r\n        this.elementsState.push({\r\n          id: item.id,\r\n          type: item.type,\r\n          layer,\r\n          element: textNode,\r\n          transformer: tr,\r\n        });\r\n        layer.draw();\r\n        this.stage.add(layer);\r\n\r\n        this.handleDeleteTransformerExcept(item.id);\r\n      }\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.init();\r\n\r\n    const editCircles = document.querySelectorAll(\".editCircle\");\r\n\r\n    editCircles.forEach((item) => {\r\n      item.onmousedown = (e) => {\r\n        const canvasContent = document.querySelector(\".canvasContent\");\r\n        const canvasEdit = document.querySelector(\".canvasEditWrap\");\r\n        const coords = canvasContent.getBoundingClientRect();\r\n        const coordsEdit = canvasEdit.getBoundingClientRect();\r\n        const width = canvasEdit.clientWidth;\r\n        const height = canvasEdit.clientHeight;\r\n        const minWidth = 200;\r\n        const minHeight = 200;\r\n\r\n        const styleTop = (canvasContent.clientHeight - height) / 2;\r\n        const styleLeft = (canvasContent.clientWidth - width) / 2;\r\n\r\n        document.onmousemove = (e) => {\r\n          let calcWidth = 0;\r\n          let calcHeight = 0;\r\n\r\n          if (item.classList.contains(\"tr\")) {\r\n            const { clientX, clientY } = e;\r\n\r\n            canvasEdit.style.top = \"auto\";\r\n            canvasEdit.style.right = \"auto\";\r\n            canvasEdit.style.bottom = styleTop + \"px\";\r\n            canvasEdit.style.left = styleLeft + \"px\";\r\n            canvasEdit.style.transform = \"none\";\r\n\r\n            let posX = clientX > coords.right ? coords.right : clientX;\r\n            let posY = clientY <= coords.top ? coords.top : clientY;\r\n\r\n            let newWidth = posX - coordsEdit.left;\r\n            let newHeight = coordsEdit.bottom - posY;\r\n\r\n            calcWidth = newWidth <= minWidth ? minWidth : newWidth;\r\n            calcHeight = newHeight <= minHeight ? minHeight : newHeight;\r\n          } else if (item.classList.contains(\"br\")) {\r\n            const { clientX, clientY } = e;\r\n\r\n            canvasEdit.style.top = styleTop + \"px\";\r\n            canvasEdit.style.left = styleLeft + \"px\";\r\n            canvasEdit.style.bottom = \"auto\";\r\n            canvasEdit.style.right = \"auto\";\r\n            canvasEdit.style.transform = \"none\";\r\n\r\n            let posX = clientX > coords.right ? coords.right : clientX;\r\n            let posY = clientY >= coords.bottom ? coords.bottom : clientY;\r\n\r\n            let newWidth = posX - coordsEdit.left;\r\n            let newHeight = posY - coordsEdit.top;\r\n\r\n            calcWidth = newWidth <= minWidth ? minWidth : newWidth;\r\n            calcHeight = newHeight <= minHeight ? minHeight : newHeight;\r\n          } else if (item.classList.contains(\"bl\")) {\r\n            const { clientX, clientY } = e;\r\n\r\n            canvasEdit.style.top = styleTop + \"px\";\r\n            canvasEdit.style.right = styleLeft + \"px\";\r\n            canvasEdit.style.left = \"auto\";\r\n            canvasEdit.style.bottom = \"auto\";\r\n            canvasEdit.style.transform = \"none\";\r\n\r\n            let posX = clientX <= coords.left ? coords.left : clientX;\r\n            let posY = clientY >= coords.bottom ? coords.bottom : clientY;\r\n\r\n            let newWidth = coordsEdit.right - posX;\r\n            let newHeight = posY - coordsEdit.top;\r\n\r\n            calcWidth = newWidth <= minWidth ? minWidth : newWidth;\r\n            calcHeight = newHeight <= minHeight ? minHeight : newHeight;\r\n          } else if (item.classList.contains(\"tl\")) {\r\n            const { clientX, clientY } = e;\r\n\r\n            canvasEdit.style.bottom = styleTop + \"px\";\r\n            canvasEdit.style.right = styleLeft + \"px\";\r\n            canvasEdit.style.left = \"auto\";\r\n            canvasEdit.style.top = \"auto\";\r\n            canvasEdit.style.transform = \"none\";\r\n\r\n            let posX = clientX <= coords.left ? coords.left : clientX;\r\n            let posY = clientY <= coords.top ? coords.top : clientY;\r\n\r\n            let newWidth = coordsEdit.right - posX;\r\n            let newHeight = coordsEdit.bottom - posY;\r\n\r\n            calcWidth = newWidth <= minWidth ? minWidth : newWidth;\r\n            calcHeight = newHeight <= minHeight ? minHeight : newHeight;\r\n          }\r\n\r\n          this.props.handleUpdateCanvas({\r\n            ...this.props.canvas,\r\n            width: +parseInt(calcWidth),\r\n            height: +parseInt(calcHeight),\r\n          });\r\n\r\n          // this.background.layer.draw();\r\n        };\r\n        document.onmouseup = (e) => {\r\n          document.onmousemove = false;\r\n\r\n          canvasEdit.style.inset = \"auto\";\r\n          canvasEdit.style.bottom = \"auto\";\r\n          canvasEdit.style.right = \"auto\";\r\n          canvasEdit.style.top = \"50%\";\r\n          canvasEdit.style.left = \"50%\";\r\n          canvasEdit.style.transform = \"translate(-50%, -50%)\";\r\n        };\r\n      };\r\n    });\r\n  }\r\n\r\n  componentWillUpdate(nextProps) {\r\n    const currElements = this.props.elements;\r\n    const nextElements = nextProps.elements;\r\n\r\n    // change elements\r\n\r\n    if (currElements.length !== nextElements.length) {\r\n      const restElements = helper.getRestArray(currElements, nextElements);\r\n      this.createElements(restElements, { isAdd: true });\r\n    } else {\r\n      currElements.forEach((item) => {\r\n        const nextItem = nextElements.find((x) => x.id === item.id);\r\n        const diffStyles = helper.comparisonStyle(item.style, nextItem.style);\r\n        const elementItem = this.elementsState.find((x) => x.id === item.id);\r\n\r\n        if (elementItem && diffStyles) {\r\n          diffStyles.forEach((styleKey) =>\r\n            elementItem.element[styleKey](nextItem.style[styleKey])\r\n          );\r\n          elementItem.layer.draw();\r\n        }\r\n      });\r\n    }\r\n\r\n    // change activeId\r\n\r\n    const currActiveId = this.props.activeId;\r\n    const nextActiveId = nextProps.activeId;\r\n\r\n    if (currActiveId !== nextActiveId && !nextActiveId) {\r\n      console.log(currActiveId, nextActiveId);\r\n      const activeTransformElement = this.elementsState.find(\r\n        (item) => item.id === currActiveId\r\n      );\r\n      if (activeTransformElement) {\r\n        activeTransformElement.transformer.enabledAnchors([]);\r\n        activeTransformElement.transformer.hide();\r\n        activeTransformElement.layer.draw();\r\n      }\r\n    }\r\n\r\n    // change canvas\r\n\r\n    const currCanvas = this.props.canvas;\r\n    const nextCanvas = nextProps.canvas;\r\n\r\n    let z = Object.keys(currCanvas).filter(\r\n      (key) => currCanvas[key] !== nextCanvas[key]\r\n    );\r\n\r\n    if (z.length > 0) {\r\n      this.updateCanvas(nextCanvas);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"canvasWrapper\" ref={this.canvasWrapper}>\r\n        <div className=\"canvasFrame\" onClick={this.handleClickFrame}></div>\r\n        <div className=\"canvasContent\">\r\n          <div className=\"canvasFrame\" onClick={this.handleClickFrame}></div>\r\n          <div className=\"canvasEditWrap\">\r\n            <div className=\"canvas-wrapper\" id=\"canvas\"></div>\r\n            <div className=\"tl editCircle\"></div>\r\n            <div className=\"tr editCircle\"></div>\r\n            <div className=\"bl editCircle\"></div>\r\n            <div className=\"br editCircle\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ elements, canvas, activeId }) => ({\r\n  elements,\r\n  canvas,\r\n  activeId,\r\n});\r\n\r\nconst mapDispatch = {\r\n  handleUpdateStyleElement,\r\n  handleChangeActiveElement,\r\n  handleUpdateCanvas,\r\n  handleUpdateStage,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatch)(Canvas);\r\n","D:\\Projects\\memo-generator2\\frontend\\src\\components\\Header\\Header.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\scenes\\EditPage\\scenes\\Sidebar\\components\\CanvasOptions\\index.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\scenes\\EditPage\\scenes\\Sidebar\\components\\TextOptions\\index.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\services\\konva.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\utils\\helpers.js",["207"],"import { STYLE_TYPES, CANVAS_CONFIG } from \"types/elements\";\r\n\r\nconst comparisonStyle = (curr, next) => {\r\n  let diffStyles = [],\r\n    b = false;\r\n\r\n  for (let key in curr) {\r\n    b = curr[key] !== next[key];\r\n    if (b) diffStyles.push(key);\r\n  }\r\n\r\n  return diffStyles.length ? diffStyles : false;\r\n};\r\n\r\nconst getCanvasConfig = (obj) => {\r\n  let config = Object.fromEntries(\r\n    CANVAS_CONFIG.map((item) => [item, obj[item]])\r\n  );\r\n\r\n  return config;\r\n};\r\n\r\nconst getRestArray = (curr, next) => {\r\n  const restElements =\r\n    curr.length > next.length\r\n      ? curr.filter((item) => !next.some((x) => x.id === item.id))\r\n      : next.filter((item) => !curr.some((x) => x.id === item.id));\r\n\r\n  return restElements;\r\n};\r\n\r\nconst filterStyleValue = (name, value) => {\r\n  switch (STYLE_TYPES[name]) {\r\n    case \"number\":\r\n      return parseFloat(value);\r\n    case \"string\":\r\n      return String(value);\r\n    case \"bool\":\r\n      return Boolean(value);\r\n    default:\r\n      return value;\r\n  }\r\n};\r\n\r\nconst getBoxShadow = (style) => {\r\n  if (style.shadowEnabled) return \"none\";\r\n  const { shadowOffsetX, shadowOffsetY, shadowBlur, shadowColor } = style;\r\n  return `${shadowOffsetX} ${shadowOffsetY} ${shadowBlur} ${shadowColor}`;\r\n};\r\n\r\nfunction createEditableBlock(textNode) {\r\n  var textPosition = textNode.absolutePosition();\r\n\r\n  const canvasCoords = this.canvasNode.getBoundingClientRect();\r\n\r\n  // so position of textarea will be the sum of positions above:\r\n  var areaPosition = {\r\n    x: canvasCoords.left + textPosition.x,\r\n    y: canvasCoords.top + textPosition.y,\r\n  };\r\n\r\n  const textarea = document.createElement(\"div\");\r\n  document.body.appendChild(textarea);\r\n\r\n  // apply many styles to match text on canvas as close as possible\r\n  // remember that text rendering on canvas and on the textarea can be different\r\n  // and sometimes it is hard to make it 100% the same. But we will try...\r\n  textarea.setAttribute(\"contenteditable\", true);\r\n  textarea.value = textNode.text();\r\n  textarea.style.position = \"absolute\";\r\n  textarea.style.top = areaPosition.y + \"px\";\r\n  textarea.style.left = areaPosition.x + \"px\";\r\n  textarea.style.width = textNode.width() - textNode.padding() * 2 + \"px\";\r\n  textarea.style.height = textNode.height() - textNode.padding() * 2 + \"px\";\r\n  textarea.style.fontSize = textNode.fontSize() + \"px\";\r\n  textarea.style.padding = \"0px\";\r\n  textarea.style.margin = \"0px\";\r\n  textarea.style.background = \"none\";\r\n  textarea.style.outline = \"none\";\r\n  textarea.style.lineHeight = textNode.lineHeight();\r\n  textarea.style.fontFamily = textNode.fontFamily();\r\n  textarea.style.fontStyle = textNode.fontStyle().includes(\"italic\")\r\n    ? \"italic\"\r\n    : \"normal\";\r\n  textarea.style.fontWeight = textNode.fontStyle().includes(\"bold\")\r\n    ? \"bold\"\r\n    : \"normal\";\r\n  textarea.style.textDecoration = textNode.textDecoration();\r\n  textarea.style.transformOrigin = \"left top\";\r\n  textarea.style.textAlign = textNode.align();\r\n  textarea.style.color = textNode.fill();\r\n  textarea.style.textShadow = \"0 0 10px #000\";\r\n  textarea.innerText = textNode.text();\r\n\r\n  const rotation = textNode.rotation();\r\n  var transform = \"\";\r\n  if (rotation) {\r\n    transform += \"rotateZ(\" + rotation + \"deg)\";\r\n  }\r\n\r\n  var px = 1;\r\n  // also we need to slightly move textarea on firefox\r\n  // because it jumps a bit\r\n  var isFirefox = navigator.userAgent.toLowerCase().indexOf(\"firefox\") > -1;\r\n  if (isFirefox) {\r\n    px += 2 + Math.round(textNode.fontSize() / 20);\r\n  }\r\n  transform += \"translateY(-\" + px + \"px)\";\r\n\r\n  textarea.style.transform = transform;\r\n\r\n  // reset height\r\n  textarea.style.height = \"auto\";\r\n  // after browsers resized it we can set actual value\r\n  textarea.style.height = textarea.scrollHeight + 3 + \"px\";\r\n\r\n  return textarea;\r\n}\r\n\r\nconst getTextareaWidth = (newWidth, textNode) => {\r\n  if (!newWidth) {\r\n    // set width for placeholder\r\n    newWidth = textNode.placeholder.length * textNode.fontSize();\r\n  }\r\n  // some extra fixes on different browsers\r\n  var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\r\n  var isFirefox = navigator.userAgent.toLowerCase().indexOf(\"firefox\") > -1;\r\n  if (isSafari || isFirefox) {\r\n    newWidth = Math.ceil(newWidth);\r\n  }\r\n\r\n  var isEdge = document.documentMode || /Edge/.test(navigator.userAgent);\r\n  if (isEdge) {\r\n    newWidth += 1;\r\n  }\r\n\r\n  return newWidth;\r\n};\r\n\r\nconst toggleCanvasEdit = (toggle) => {\r\n  const editCircles = document.querySelectorAll(\".editCircle\");\r\n\r\n  editCircles.forEach((item) => {\r\n    item.style.display = toggle ? \"block\" : \"none\";\r\n  });\r\n};\r\n\r\nexport default {\r\n  comparisonStyle,\r\n  getRestArray,\r\n  filterStyleValue,\r\n  getBoxShadow,\r\n  createEditableBlock,\r\n  getTextareaWidth,\r\n  getCanvasConfig,\r\n  toggleCanvasEdit,\r\n};\r\n","D:\\Projects\\memo-generator2\\frontend\\src\\scenes\\EditPage\\scenes\\Sidebar\\components\\CanvasOptions\\CanvasOptions.js",["208"],"import React, { useMemo, useState, useEffect } from \"react\";\r\nimport { Number, Color } from \"components/Form\";\r\nimport { connect } from \"react-redux\";\r\nimport { handleUpdateCanvas } from \"reducers\";\r\nimport SidebarSection from \"components/SidebarSection\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport helper from \"utils/helpers\";\r\nimport AddBackground from \"modals/AddBackground\";\r\nimport cls from \"classnames\";\r\nimport closeIcon from \"assets/images/close.svg\";\r\n\r\nimport classes from \"./CanvasOptions.module.scss\";\r\n\r\nconst CanvasOptions = ({ canvas, handleUpdateCanvas }) => {\r\n  const [isBackgroundModal, setIsBackgroundModal] = useState(false);\r\n  const [fields, setFields] = useState(canvas);\r\n\r\n  useEffect(() => {\r\n    setFields((state) => ({\r\n      ...state,\r\n      width: canvas.width,\r\n      height: canvas.height,\r\n    }));\r\n  }, [canvas]);\r\n\r\n  const onChangeSize = ({ target }) => {\r\n    const { name, value } = target;\r\n    const modifiedValue = helper.filterStyleValue(name, value);\r\n    setFields((state) => ({ ...state, [name]: modifiedValue }));\r\n  };\r\n\r\n  const onChangeStyle = ({ target }) => {\r\n    const { name, value } = target;\r\n    const modifiedValue = helper.filterStyleValue(name, value);\r\n    handleUpdate();\r\n    setFields((state) => ({ ...state, [name]: modifiedValue }));\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    handleUpdateCanvas({\r\n      ...canvas,\r\n      ...fields,\r\n    });\r\n  };\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    handleUpdate();\r\n  };\r\n\r\n  const handleDeleteBackground = () => {\r\n    handleUpdateCanvas({\r\n      ...canvas,\r\n      backgroundImage: \"\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <SidebarSection title=\"Size\">\r\n        <form action=\"\" onSubmit={onSubmit}>\r\n          <div className={classes.sectionGrid}>\r\n            <Number\r\n              name=\"width\"\r\n              label=\"W\"\r\n              value={fields.width || \"\"}\r\n              onBlur={handleUpdate}\r\n              onChange={onChangeSize}\r\n              className={classes.numberInput}\r\n            />\r\n            <Number\r\n              name=\"height\"\r\n              label=\"H\"\r\n              value={fields?.height || \"\"}\r\n              className={classes.numberInput}\r\n              onChange={onChangeSize}\r\n              onBlur={handleUpdate}\r\n            />\r\n          </div>\r\n          <button type=\"submit\" hidden></button>\r\n        </form>\r\n      </SidebarSection>\r\n      <SidebarSection title=\"Background\">\r\n        <div className={classes.sectionGrid}>\r\n          <Color\r\n            name=\"fill\"\r\n            value={fields.fill}\r\n            className={classes.fullRow}\r\n            onChange={onChangeStyle}\r\n          />\r\n\r\n          {!canvas.backgroundImage ? (\r\n            <Button\r\n              className={classes.fullRow}\r\n              onClick={() => setIsBackgroundModal(true)}\r\n            >\r\n              Add Background Image\r\n            </Button>\r\n          ) : (\r\n            <div className={cls(classes.fullRow, classes.image)}>\r\n              <div className={classes.overlay}>\r\n                <img\r\n                  src={closeIcon}\r\n                  onClick={handleDeleteBackground}\r\n                  className={classes.closeImage}\r\n                  alt=\"close\"\r\n                />\r\n                <p onClick={() => setIsBackgroundModal(true)}>Change</p>\r\n              </div>\r\n              <img\r\n                src={canvas.backgroundImage}\r\n                className={classes.backgroundImage}\r\n                alt=\"\"\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          <AddBackground\r\n            show={isBackgroundModal}\r\n            onHide={() => setIsBackgroundModal(false)}\r\n          />\r\n        </div>\r\n      </SidebarSection>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  canvas: state.canvas,\r\n});\r\n\r\nconst mapDispatch = {\r\n  handleUpdateCanvas,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatch)(CanvasOptions);\r\n","D:\\Projects\\memo-generator2\\frontend\\src\\scenes\\EditPage\\scenes\\Sidebar\\components\\TextOptions\\TextOptions.js",["209","210","211","212","213"],"import React, { useMemo, useState, useEffect } from \"react\";\r\nimport {\r\n  Number,\r\n  Select,\r\n  ButtonsCheck,\r\n  ButtonsSwitch,\r\n  Color,\r\n} from \"components/Form\";\r\nimport SidebarSection from \"components/SidebarSection\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { TEXT_OPTIONS_TEMPLATE } from \"types/elements\";\r\nimport { handleUpdateElement } from \"reducers\";\r\nimport helper from \"utils/helpers\";\r\nimport { FONTS } from \"types/fonts\";\r\n\r\nimport fontSizeIcon from \"assets/images/font-size.svg\";\r\nimport lineHeightIcon from \"assets/images/line-height.svg\";\r\n\r\nimport { textAlignOptions, textStyleOptions, fontStyleOptions } from \"./data\";\r\n\r\nimport classes from \"./TextOptions.module.scss\";\r\n\r\nconst TextOptions = ({ activeId, elements, handleUpdateElement }) => {\r\n  const [textStyle, setTextStyle] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (activeId && elements) {\r\n      const element = elements.find((item) => item.id === activeId);\r\n      element && setTextStyle(element);\r\n    }\r\n  }, [activeId, elements.length]);\r\n\r\n  const onChangeStyle = ({ target: { name, value } }) => {\r\n    const modifiedValue = helper.filterStyleValue(name, value);\r\n\r\n    const updatedElement = {\r\n      ...textStyle,\r\n      style: { ...textStyle.style, [name]: modifiedValue },\r\n    };\r\n\r\n    setTextStyle(updatedElement);\r\n    handleUpdateElement(updatedElement.id, updatedElement);\r\n  };\r\n  const onChangeText = ({ target }) => {\r\n    const updatedElement = { ...textStyle, text: target.value };\r\n\r\n    setTextStyle(updatedElement);\r\n    handleUpdateElement(updatedElement.id, updatedElement);\r\n  };\r\n\r\n  const handleChangeFontFamily = ({ value, label, url }) => {\r\n    const head = document.querySelector(\"head\");\r\n    const links = document.querySelectorAll(\"link[data-font]\");\r\n\r\n    const is = [...links].some(\r\n      (node) => node.getAttribute(\"data-font\") === value\r\n    );\r\n\r\n    if (!is) {\r\n      const link = document.createElement(\"link\");\r\n      link.setAttribute(\"data-font\", value);\r\n      link.rel = \"stylesheet\";\r\n      link.href = url;\r\n      head.appendChild(link);\r\n      link.onload = () => {\r\n        onChangeStyle({ target: { name: \"fontFamily\", value: label } });\r\n      };\r\n    } else {\r\n      onChangeStyle({ target: { name: \"fontFamily\", value: label } });\r\n    }\r\n  };\r\n\r\n  if (!textStyle) return null;\r\n\r\n  return (\r\n    <>\r\n      <SidebarSection title=\"Text\">\r\n        <Form.Control\r\n          name=\"text\"\r\n          as=\"textarea\"\r\n          rows={2}\r\n          onChange={onChangeStyle}\r\n          value={textStyle.style.text || \"\"}\r\n        />\r\n      </SidebarSection>\r\n      <SidebarSection title=\"Font\">\r\n        <div className={classes.sectionGrid}>\r\n          <Select\r\n            options={fontStyleOptions}\r\n            defaultValue={fontStyleOptions.find(\r\n              (x) => x.label === textStyle.style.fontFamily\r\n            )}\r\n            className={classes.fullRow}\r\n            onChange={handleChangeFontFamily}\r\n          />\r\n          <Number\r\n            name=\"fontSize\"\r\n            icon={fontSizeIcon}\r\n            value={textStyle.style?.fontSize || \"\"}\r\n            onChange={onChangeStyle}\r\n          />\r\n          <Number\r\n            name=\"lineHeight\"\r\n            icon={lineHeightIcon}\r\n            value={textStyle.style?.lineHeight || \"\"}\r\n            onChange={onChangeStyle}\r\n          />\r\n          <ButtonsCheck\r\n            activeId={activeId}\r\n            textStyle={textStyle.style}\r\n            onChange={onChangeStyle}\r\n            options={textStyleOptions}\r\n          />\r\n          <ButtonsSwitch\r\n            name=\"align\"\r\n            value={textStyle.style.align}\r\n            options={textAlignOptions}\r\n            onChange={onChangeStyle}\r\n          />\r\n        </div>\r\n      </SidebarSection>\r\n\r\n      <SidebarSection title=\"Fill\">\r\n        <div className={classes.sectionGrid}>\r\n          <Color\r\n            name=\"fill\"\r\n            value={textStyle.style.fill}\r\n            className={classes.fullRow}\r\n            onChange={onChangeStyle}\r\n          />\r\n        </div>\r\n      </SidebarSection>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  activeId: state.activeId,\r\n  elements: state.elements,\r\n});\r\n\r\nconst mapDispatch = {\r\n  handleUpdateElement,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatch)(TextOptions);\r\n","D:\\Projects\\memo-generator2\\frontend\\src\\scenes\\EditPage\\scenes\\Sidebar\\components\\TextOptions\\data.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\types\\fonts.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\components\\Form\\index.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\components\\SidebarSection\\index.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\modals\\AddBackground\\index.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\components\\SidebarSection\\SidebarSection.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\modals\\AddBackground\\AddBackground.js",["214","215","216","217"],"import React, { useState } from \"react\";\r\nimport Modal from \"components/Modal\";\r\nimport { Tabs, Tab } from \"react-bootstrap\";\r\nimport Dropzone from \"components/Dropzone\";\r\nimport { connect } from \"react-redux\";\r\nimport { handleUpdateCanvas } from \"reducers\";\r\n\r\nconst AddBackground = ({ show, onHide, canvas, handleUpdateCanvas }) => {\r\n  const [files, setFiles] = useState([]);\r\n\r\n  const handleUpdateFiles = (e) => {\r\n    const url = URL.createObjectURL(e[0]);\r\n    handleUpdateCanvas({\r\n      ...canvas,\r\n      backgroundImage: url,\r\n      backgroundFile: e[0],\r\n    });\r\n    onHide();\r\n  };\r\n\r\n  return (\r\n    <Modal show={show} onHide={onHide} title=\"Add Background\">\r\n      <Dropzone handleUpdateFiles={handleUpdateFiles} />\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst mapState = (state) => ({\r\n  canvas: state.canvas,\r\n});\r\n\r\nconst mapDispatch = { handleUpdateCanvas };\r\n\r\nexport default connect(mapState, mapDispatch)(AddBackground);\r\n","D:\\Projects\\memo-generator2\\frontend\\src\\components\\Form\\components\\ButtonsCheck\\index.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\components\\Form\\components\\Number\\index.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\components\\Form\\components\\Select\\index.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\components\\Form\\components\\ButtonsSwitch\\index.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\components\\Form\\components\\Color\\index.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\components\\Form\\components\\Select\\Select.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\components\\Form\\components\\ButtonsSwitch\\ButtonsSwitch.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\components\\Form\\components\\Color\\Color.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\components\\Form\\components\\ButtonsCheck\\ButtonsCheck.js",["218"],"import React, { useState, useEffect } from \"react\";\r\nimport cls from \"classnames\";\r\nimport PropTypes from \"prop-types\";\r\nimport classes from \"./ButtonsCheck.module.scss\";\r\n\r\nconst ButtonsCheck = ({ textStyle, options, onChange }) => {\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (textStyle) {\r\n      let arr = options\r\n        .filter(\r\n          (item) =>\r\n            textStyle[item.option]?.split(\" \").includes(item.value) || false\r\n        )\r\n        .map((item) => ({ option: item.option, value: item.value }));\r\n\r\n      setSelectedOptions(arr);\r\n    }\r\n  }, [textStyle]);\r\n\r\n  const handleChange = (item) => {\r\n    const { value, option } = item;\r\n\r\n    const isExist = selectedOptions.some((x) => x.value === value);\r\n\r\n    let modifiedState = isExist\r\n      ? selectedOptions.filter((x) => x.value !== value)\r\n      : [...selectedOptions, { option, value }];\r\n\r\n    setSelectedOptions(modifiedState);\r\n\r\n    let newValue = modifiedState\r\n      .filter((x) => x.option === option)\r\n      .map((x) => x.value)\r\n      .join(\" \");\r\n\r\n    onChange({ target: { name: option, value: newValue } });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.buttonsCheck}>\r\n      {options.map((item) => (\r\n        <div\r\n          className={cls(classes.buttonsCheckItem, {\r\n            [classes.activeItem]: selectedOptions.some(\r\n              ({ value }) => value === item.value\r\n            ),\r\n          })}\r\n          key={item.value}\r\n          onClick={() => handleChange(item)}\r\n        >\r\n          {item.label}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nButtonsCheck.propTypes = {\r\n  options: PropTypes.array,\r\n  onChange: PropTypes.func,\r\n};\r\n\r\nButtonsCheck.defaultProps = {\r\n  options: [],\r\n  onChange: () => {},\r\n};\r\n\r\nexport default ButtonsCheck;\r\n","D:\\Projects\\memo-generator2\\frontend\\src\\components\\Form\\components\\Number\\Number.js",["219"],"import React from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport classes from \"./Number.module.scss\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Number = ({\r\n  name,\r\n  value,\r\n  icon,\r\n  label,\r\n  onChange,\r\n  className,\r\n  ...other\r\n}) => {\r\n  return (\r\n    <div className={classes.field}>\r\n      <label htmlFor={name} className={classes.fieldLabel}>\r\n        {icon ? <img src={icon} /> : (label && <span>{label}</span>) || null}\r\n      </label>\r\n      <div className={classes.fieldInput}>\r\n        <Form.Control\r\n          name={name}\r\n          id={name}\r\n          onChange={onChange}\r\n          type=\"number\"\r\n          value={value}\r\n          className={className}\r\n          {...other}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nNumber.propTypes = {\r\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  label: PropTypes.string,\r\n  icon: PropTypes.string,\r\n};\r\n\r\nNumber.defaultProps = {\r\n  value: \"\",\r\n  icon: \"\",\r\n  label: \"\",\r\n};\r\n\r\nexport default Number;\r\n","D:\\Projects\\memo-generator2\\frontend\\src\\components\\Dropzone\\index.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\components\\Modal\\index.js",[],"D:\\Projects\\memo-generator2\\frontend\\src\\components\\Dropzone\\Dropzone.js",["220","221","222","223","224","225","226"],"/* eslint-disable no-restricted-syntax */\r\nimport React, { useRef, useState, useEffect, useCallback } from \"react\";\r\nimport classNames from \"classnames\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport uploadIcon from \"assets/images/upload.svg\";\r\nimport classes from \"./Dropzone.module.scss\";\r\n\r\nconst MyDropzone = ({ handleUpdateFiles }) => {\r\n  const onDrop = (acceptedFiles) => {\r\n    handleUpdateFiles(acceptedFiles);\r\n  };\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n\r\n  return (\r\n    <div {...getRootProps()}>\r\n      <input {...getInputProps()} />\r\n      {\r\n        <div className={classes.dropWrap}>\r\n          <div className={classes.dropContent}>\r\n            <img src={uploadIcon} alt=\"Upload Icon\" />\r\n            <p>\r\n              Click to upload, <br /> or drag and drop file here.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyDropzone;\r\n","D:\\Projects\\memo-generator2\\frontend\\src\\components\\Modal\\Modal.js",["227"],"import { Modal, Button } from \"react-bootstrap\";\r\nimport classes from \"./Modal.module.scss\";\r\n\r\nfunction CustomModal({ title, children, onHide, show }) {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered animation=\"fade\">\r\n      <Modal.Title className={classes.modalTitle}>{title}</Modal.Title>\r\n      <Modal.Body>{children}</Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default CustomModal;\r\n",{"ruleId":"228","severity":1,"message":"229","line":6,"column":8,"nodeType":"230","messageId":"231","endLine":6,"endColumn":23},{"ruleId":"228","severity":1,"message":"232","line":1,"column":10,"nodeType":"230","messageId":"231","endLine":1,"endColumn":22},{"ruleId":"228","severity":1,"message":"233","line":4,"column":8,"nodeType":"230","messageId":"231","endLine":4,"endColumn":24},{"ruleId":"234","severity":1,"message":"235","line":44,"column":5,"nodeType":"236","endLine":44,"endColumn":14,"suggestions":"237"},{"ruleId":"228","severity":1,"message":"238","line":1,"column":28,"nodeType":"230","messageId":"231","endLine":1,"endColumn":37},{"ruleId":"228","severity":1,"message":"239","line":3,"column":10,"nodeType":"230","messageId":"231","endLine":3,"endColumn":31},{"ruleId":"228","severity":1,"message":"240","line":3,"column":33,"nodeType":"230","messageId":"231","endLine":3,"endColumn":46},{"ruleId":"228","severity":1,"message":"241","line":11,"column":13,"nodeType":"230","messageId":"231","endLine":11,"endColumn":25},{"ruleId":"228","severity":1,"message":"242","line":44,"column":13,"nodeType":"230","messageId":"231","endLine":44,"endColumn":27},{"ruleId":"243","severity":1,"message":"244","line":148,"column":1,"nodeType":"245","endLine":157,"endColumn":3},{"ruleId":"228","severity":1,"message":"246","line":1,"column":17,"nodeType":"230","messageId":"231","endLine":1,"endColumn":24},{"ruleId":"228","severity":1,"message":"246","line":1,"column":17,"nodeType":"230","messageId":"231","endLine":1,"endColumn":24},{"ruleId":"228","severity":1,"message":"239","line":12,"column":10,"nodeType":"230","messageId":"231","endLine":12,"endColumn":31},{"ruleId":"228","severity":1,"message":"247","line":15,"column":10,"nodeType":"230","messageId":"231","endLine":15,"endColumn":15},{"ruleId":"234","severity":1,"message":"248","line":32,"column":6,"nodeType":"236","endLine":32,"endColumn":33,"suggestions":"249"},{"ruleId":"228","severity":1,"message":"250","line":45,"column":9,"nodeType":"230","messageId":"231","endLine":45,"endColumn":21},{"ruleId":"228","severity":1,"message":"251","line":3,"column":10,"nodeType":"230","messageId":"231","endLine":3,"endColumn":14},{"ruleId":"228","severity":1,"message":"252","line":3,"column":16,"nodeType":"230","messageId":"231","endLine":3,"endColumn":19},{"ruleId":"228","severity":1,"message":"253","line":9,"column":10,"nodeType":"230","messageId":"231","endLine":9,"endColumn":15},{"ruleId":"228","severity":1,"message":"254","line":9,"column":17,"nodeType":"230","messageId":"231","endLine":9,"endColumn":25},{"ruleId":"234","severity":1,"message":"255","line":20,"column":6,"nodeType":"236","endLine":20,"endColumn":17,"suggestions":"256"},{"ruleId":"257","severity":1,"message":"258","line":18,"column":17,"nodeType":"259","endLine":18,"endColumn":35},{"ruleId":"228","severity":1,"message":"260","line":2,"column":17,"nodeType":"230","messageId":"231","endLine":2,"endColumn":23},{"ruleId":"228","severity":1,"message":"261","line":2,"column":25,"nodeType":"230","messageId":"231","endLine":2,"endColumn":33},{"ruleId":"228","severity":1,"message":"262","line":2,"column":35,"nodeType":"230","messageId":"231","endLine":2,"endColumn":44},{"ruleId":"228","severity":1,"message":"263","line":2,"column":46,"nodeType":"230","messageId":"231","endLine":2,"endColumn":57},{"ruleId":"228","severity":1,"message":"264","line":3,"column":8,"nodeType":"230","messageId":"231","endLine":3,"endColumn":18},{"ruleId":"228","severity":1,"message":"265","line":4,"column":8,"nodeType":"230","messageId":"231","endLine":4,"endColumn":17},{"ruleId":"228","severity":1,"message":"266","line":14,"column":40,"nodeType":"230","messageId":"231","endLine":14,"endColumn":52},{"ruleId":"228","severity":1,"message":"267","line":1,"column":17,"nodeType":"230","messageId":"231","endLine":1,"endColumn":23},"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","'ELEMENT_TYPE' is defined but never used.","'canvasBackground' is defined but never used.","react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'handleAddElement'. Either include it or remove the dependency array. Outer scope values like 'classes' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["268"],"'createRef' is defined but never used.","'TEXT_OPTIONS_TEMPLATE' is defined but never used.","'CANVAS_CONFIG' is defined but never used.","'konvaService' is defined but never used.","'isTransforming' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'useMemo' is defined but never used.","'FONTS' is defined but never used.","React Hook useEffect has a missing dependency: 'elements'. Either include it or remove the dependency array.",["269"],"'onChangeText' is assigned a value but never used.","'Tabs' is defined but never used.","'Tab' is defined but never used.","'files' is assigned a value but never used.","'setFiles' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'options'. Either include it or remove the dependency array.",["270"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useRef' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'useCallback' is defined but never used.","'classNames' is defined but never used.","'PropTypes' is defined but never used.","'isDragActive' is assigned a value but never used.","'Button' is defined but never used.",{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},"Update the dependencies array to be: [handleAddElement]",{"range":"277","text":"278"},"Update the dependencies array to be: [activeId, elements, elements.length]",{"range":"279","text":"280"},"Update the dependencies array to be: [options, textStyle]",{"range":"281","text":"282"},[1186,1195],"[handleAddElement]",[1045,1072],"[activeId, elements, elements.length]",[614,625],"[options, textStyle]"]